#!/usr/bin/python


###  Copyright 2023 Punam Rattu ###
###################################################################################
#  This script takes output from count_ion.pl to calculate mean current ± SD through
#  the pore. The mean current ± SD is calculated for each ion (e.g. K+ and Cl-)
#  and the electrolyte (e.g. KCl).
###################################################################################

###################################################################################
#INSTRUCTIONS#
###################################################################################
#1. Run count_ion.pl for each ion in the electrolyte.
#2. Change file names in this script to match the output files generated by count_ion.pl
#3. Run script: python current_mean_sd.py





import numpy as np
import pandas as pd

def mean_k_current(k,time):
        cum_k = sum(k)
        ns = (time[-1])/1000
        col=1.6E-19
        mean_k=((cum_k*col)/(ns*1000*1E-12))*1E12
        return(mean_k)

def std_k(k,time):
      k_coloumb = []
      s = 0
      for i in k:
           s += i
           col=1.6E-19
           x = s*col
           k_coloumb.append(x)
      sec = time*1E-12
      w=np.array(k_coloumb[2:])
      y=np.array(sec[2:])
      z=w/y
      zpA = z*1E12
      std = np.nanstd(zpA)
      return(std)

def mean_cl_current(cl,time):
        cum_cl = sum(cl)
        ns = (time[-1])/1000
        col=1.6E-19
        mean_cl=((cum_cl*col)/(ns*1000*1E-12))*1E12
        return(mean_cl)

def std_cl(cl,time):
      cl_coloumb = []
      s = 0
      for i in cl:
           s += i
           col=1.6E-19
           x = s*col
           cl_coloumb.append(x)
      sec = time*1E-12
      w=np.array(cl_coloumb[2:])
      y=np.array(sec[2:])
      z=w/y
      zpA = z*1E12
      std = np.nanstd(zpA)
      return(std)

def std(k, cl,time):
      k_coloumb = []
      s = 0
      for i in k:
           s += i
           col=1.6E-19
           x = s*col
           k_coloumb.append(x)
      cl_coloumb = []
      b = 0
      for i in cl:
           b += i
           col=1.6E-19
           x = b*col
           cl_coloumb.append(x)        
      sec = time*1E-12
      w=np.array(k_coloumb[2:])
      x=np.array(cl_coloumb[2:])
      t=np.add(w,x)
      y=np.array(sec[2:])
      z=t/y
      zpA = z*1E12
      std = np.nanstd(zpA)
      return(std)

k1=np.loadtxt('current_k.xvg', delimiter=' ', usecols=(1,))
cl1=np.loadtxt('current_cl.xvg', delimiter=' ', usecols=(1,))
time1=np.loadtxt('current_cl.xvg', delimiter=' ', usecols=(0,))

data = {'K current':[mean_k_current(k1,time1)], 'K current SD': [std_k(k1,time1)], 'Cl current': [mean_cl_current(cl1,time1)], 'Cl current SD':[std_cl(cl1,time1)], 'TOTAL current SD':[std(k1,cl1,time1)]}

df = pd.DataFrame(data)
print(df)
df.to_csv('current_mean_sd.csv')
